version: '3.8'
services:
  #product service db
  mysql-db:
    image: mysql:8.0
    container_name: 'mysql-db'
    environment:
     MYSQL_ROOT_PASSWORD: 'rootpass'
     MYSQL_DATABASE: 'productdb'
    ports:
     - "3306:3306"
    volumes:
     - "mysql_data:/var/lib/mysql"
    healthcheck: # Very important for ensuring MySQL is ready before dependent services start
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s # Give MySQL time to start before health checks begin
    networks:
      - my-app-network

  #Order service db    
  mysql-db-order:
    image: mysql:8.0
    container_name: 'order-mysql-db'
    environement:
      MYSQL_ROOT_PASSWORD: 'orderpass'
      MYSQL_DATABASE: 'orderdb'
    ports:
      "3307:3306"
    volumes:
      - "order_mysql_data:/var/lib/mysql"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - my-app-network

  discovery-server:
    image: microservices-tutorial/discovery-server:latest
    container_name: discovery-server
    ports:
      - "8761:8761"
    networks:
      - my-app-network
  product-service:
    build: ./product-service
    container_name: "product-service"
    ports:
      - "8080:8080"
    networks:
      - my-app-network
    depends_on:
      mysql-db:
       condition: service_healthy
      discovery-server:
       condition: service_started
  #Order service container 
  order-service:
    build: ./order-service
    container_name: "order-service"
    ports:
      - "8081:8081"
    depends_on:
      order-mysql-db:
        condition: service_healthy
      discovery-server:
        condition: service_started
    networks:
      - my-app-network

volumes:
  mysql_data:
networks:
  my-app-network:
    driver: bridge